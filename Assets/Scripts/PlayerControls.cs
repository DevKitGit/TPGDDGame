//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""World"",
            ""id"": ""e9f9dee0-a9aa-4767-9a76-d9c41e5d1166"",
            ""actions"": [
                {
                    ""name"": ""WorldNavigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b59c91de-0974-4fc3-98f8-49e0d8f60155"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WorldInteract"",
                    ""type"": ""Button"",
                    ""id"": ""9653583a-568c-411f-b838-d8d0d55d8b3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WorldCancel"",
                    ""type"": ""Button"",
                    ""id"": ""a0aed153-ee0f-487b-9e44-4268a3e2f64f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WorldUIEnter"",
                    ""type"": ""Button"",
                    ""id"": ""0ae73409-054a-48a9-a9f7-c914830802a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f8444ab-0b6d-4409-8a2e-b5086c5e9767"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0326727-ed7f-420e-949b-4f29835c46f1"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldCancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab54c805-8eac-4648-baba-3a2d57200931"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldUIEnter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35a34419-7e24-4833-b2d3-84d4c90a6189"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldNavigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""70b5833b-9b34-4058-97d0-e322baac39e9"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a08ba84e-5402-4c5c-b84c-0f47c7ba1477"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.04)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""0591d8eb-057a-405b-90bf-c20932fd6076"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""965ba3ab-e798-43f1-b6e5-6aa4804a4d7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""95dbd718-2865-4bf2-9c08-c2392eff0696"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5b154565-5bec-4201-a5a7-49355f3afec8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b09a8c86-d6f7-4113-a5ef-aa612c34f42d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3006580d-666c-4b31-88c2-b16f1cde8dd0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5488953e-5b6b-41dc-8596-6026acc136df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDevicePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fd3990a8-69aa-412b-b503-2ec7ef5d8210"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDeviceOrientation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fb110340-c979-46f1-a4be-c4be35021ba6"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Join"",
                    ""type"": ""Button"",
                    ""id"": ""a6d57278-5115-43c8-ad32-80c4d3ad4871"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""0591d293-1dcf-418a-9abb-b316eb723b8b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eb97c270-ce89-4a23-8f6f-5290c2342d6e"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e0847e94-dfd9-454d-a5b4-1c42e22a0787"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3de97b57-b271-4672-9f63-3a0e80a2cef0"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f06714d5-5ea4-4c64-b97b-c954b6b1707c"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f60fba83-099f-4dde-8dc8-47eba692b43f"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""948051d5-86fe-4485-9ebd-e64fd50b7b8b"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""328e251b-2e32-49cf-94b3-1bd928a24cab"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f80e0a9-1e23-45e5-a0b8-3b1975aa8402"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dcee89c-d4f3-4a02-b045-6d10a7979906"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0b0705a-1acc-4cbd-8114-dcc560dc2d74"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""1c06f421-c113-4926-8ad6-033d4468320a"",
            ""actions"": [
                {
                    ""name"": ""CombatGridMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9515cc3a-d577-4b41-be6a-65410bb4518e"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CombatGridMoveReset"",
                    ""type"": ""Button"",
                    ""id"": ""215fd71c-053f-4c96-81c8-5e1b13bd3c5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CombatInteract"",
                    ""type"": ""Button"",
                    ""id"": ""37ef4fe5-eb0b-47c0-81a8-ee6149eb3ff3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CombatCancel"",
                    ""type"": ""Button"",
                    ""id"": ""3c4ae884-760f-4171-ac01-56b1801c5bfb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CombatUINavigate"",
                    ""type"": ""Value"",
                    ""id"": ""4ff7e40a-d5fd-4a8a-b1eb-3bc169645622"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CombatUIEnter"",
                    ""type"": ""Button"",
                    ""id"": ""f08a1ce8-79f0-4ef1-9e66-c4fddabe134c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3a1cf1a4-9261-4c4d-a9c3-50c06b26d281"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""CombatGridMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c585e7c2-2f6a-4f7b-a1da-429888a01640"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatGridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04197411-b8a4-440a-aa94-7751d35b56a5"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatGridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""20601546-bc82-4a54-a18b-d8ee5f7d6cfd"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatGridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""44d29fd0-5576-41a9-91d0-dcb47edc68fb"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatGridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""58f06139-0f53-4758-881b-5112e3f9dd0b"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatGridMoveReset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f77de862-1dcc-400f-b81b-6364f667a980"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78bd5b47-2eb2-4a0f-a7be-7c59eed94e8d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatCancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e521a259-c87c-4164-8d00-0f76b4509a17"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatUINavigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b316c508-d18e-4347-bacb-4f7fcef60fc7"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatUIEnter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WorldUI"",
            ""id"": ""44807740-99f5-4449-a609-1ef4470d81cb"",
            ""actions"": [
                {
                    ""name"": ""WorldUINavigate"",
                    ""type"": ""Button"",
                    ""id"": ""89fc5a67-0db1-4779-885a-213404d423ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WorldUIInteract"",
                    ""type"": ""Button"",
                    ""id"": ""3e8433f7-f9cc-4165-82b4-f013eb9c0fc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f4fc5021-8785-41cc-9e6e-f7847921c730"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""WorldUINavigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1624798b-dfbb-4c19-8b85-c93994261e21"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldUIInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // World
        m_World = asset.FindActionMap("World", throwIfNotFound: true);
        m_World_WorldNavigate = m_World.FindAction("WorldNavigate", throwIfNotFound: true);
        m_World_WorldInteract = m_World.FindAction("WorldInteract", throwIfNotFound: true);
        m_World_WorldCancel = m_World.FindAction("WorldCancel", throwIfNotFound: true);
        m_World_WorldUIEnter = m_World.FindAction("WorldUIEnter", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
        m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
        m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
        m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_ScrollWheel = m_UI.FindAction("ScrollWheel", throwIfNotFound: true);
        m_UI_MiddleClick = m_UI.FindAction("MiddleClick", throwIfNotFound: true);
        m_UI_RightClick = m_UI.FindAction("RightClick", throwIfNotFound: true);
        m_UI_TrackedDevicePosition = m_UI.FindAction("TrackedDevicePosition", throwIfNotFound: true);
        m_UI_TrackedDeviceOrientation = m_UI.FindAction("TrackedDeviceOrientation", throwIfNotFound: true);
        m_UI_Join = m_UI.FindAction("Join", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_CombatGridMove = m_Combat.FindAction("CombatGridMove", throwIfNotFound: true);
        m_Combat_CombatGridMoveReset = m_Combat.FindAction("CombatGridMoveReset", throwIfNotFound: true);
        m_Combat_CombatInteract = m_Combat.FindAction("CombatInteract", throwIfNotFound: true);
        m_Combat_CombatCancel = m_Combat.FindAction("CombatCancel", throwIfNotFound: true);
        m_Combat_CombatUINavigate = m_Combat.FindAction("CombatUINavigate", throwIfNotFound: true);
        m_Combat_CombatUIEnter = m_Combat.FindAction("CombatUIEnter", throwIfNotFound: true);
        // WorldUI
        m_WorldUI = asset.FindActionMap("WorldUI", throwIfNotFound: true);
        m_WorldUI_WorldUINavigate = m_WorldUI.FindAction("WorldUINavigate", throwIfNotFound: true);
        m_WorldUI_WorldUIInteract = m_WorldUI.FindAction("WorldUIInteract", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // World
    private readonly InputActionMap m_World;
    private IWorldActions m_WorldActionsCallbackInterface;
    private readonly InputAction m_World_WorldNavigate;
    private readonly InputAction m_World_WorldInteract;
    private readonly InputAction m_World_WorldCancel;
    private readonly InputAction m_World_WorldUIEnter;
    public struct WorldActions
    {
        private @PlayerControls m_Wrapper;
        public WorldActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @WorldNavigate => m_Wrapper.m_World_WorldNavigate;
        public InputAction @WorldInteract => m_Wrapper.m_World_WorldInteract;
        public InputAction @WorldCancel => m_Wrapper.m_World_WorldCancel;
        public InputAction @WorldUIEnter => m_Wrapper.m_World_WorldUIEnter;
        public InputActionMap Get() { return m_Wrapper.m_World; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldActions set) { return set.Get(); }
        public void SetCallbacks(IWorldActions instance)
        {
            if (m_Wrapper.m_WorldActionsCallbackInterface != null)
            {
                @WorldNavigate.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldNavigate;
                @WorldNavigate.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldNavigate;
                @WorldNavigate.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldNavigate;
                @WorldInteract.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldInteract;
                @WorldInteract.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldInteract;
                @WorldInteract.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldInteract;
                @WorldCancel.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldCancel;
                @WorldCancel.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldCancel;
                @WorldCancel.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldCancel;
                @WorldUIEnter.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldUIEnter;
                @WorldUIEnter.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldUIEnter;
                @WorldUIEnter.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnWorldUIEnter;
            }
            m_Wrapper.m_WorldActionsCallbackInterface = instance;
            if (instance != null)
            {
                @WorldNavigate.started += instance.OnWorldNavigate;
                @WorldNavigate.performed += instance.OnWorldNavigate;
                @WorldNavigate.canceled += instance.OnWorldNavigate;
                @WorldInteract.started += instance.OnWorldInteract;
                @WorldInteract.performed += instance.OnWorldInteract;
                @WorldInteract.canceled += instance.OnWorldInteract;
                @WorldCancel.started += instance.OnWorldCancel;
                @WorldCancel.performed += instance.OnWorldCancel;
                @WorldCancel.canceled += instance.OnWorldCancel;
                @WorldUIEnter.started += instance.OnWorldUIEnter;
                @WorldUIEnter.performed += instance.OnWorldUIEnter;
                @WorldUIEnter.canceled += instance.OnWorldUIEnter;
            }
        }
    }
    public WorldActions @World => new WorldActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Navigate;
    private readonly InputAction m_UI_Submit;
    private readonly InputAction m_UI_Cancel;
    private readonly InputAction m_UI_Point;
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_ScrollWheel;
    private readonly InputAction m_UI_MiddleClick;
    private readonly InputAction m_UI_RightClick;
    private readonly InputAction m_UI_TrackedDevicePosition;
    private readonly InputAction m_UI_TrackedDeviceOrientation;
    private readonly InputAction m_UI_Join;
    public struct UIActions
    {
        private @PlayerControls m_Wrapper;
        public UIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        public InputAction @Submit => m_Wrapper.m_UI_Submit;
        public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
        public InputAction @Point => m_Wrapper.m_UI_Point;
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputAction @ScrollWheel => m_Wrapper.m_UI_ScrollWheel;
        public InputAction @MiddleClick => m_Wrapper.m_UI_MiddleClick;
        public InputAction @RightClick => m_Wrapper.m_UI_RightClick;
        public InputAction @TrackedDevicePosition => m_Wrapper.m_UI_TrackedDevicePosition;
        public InputAction @TrackedDeviceOrientation => m_Wrapper.m_UI_TrackedDeviceOrientation;
        public InputAction @Join => m_Wrapper.m_UI_Join;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Navigate.started -= m_Wrapper.m_UIActionsCallbackInterface.OnNavigate;
                @Navigate.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnNavigate;
                @Navigate.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnNavigate;
                @Submit.started -= m_Wrapper.m_UIActionsCallbackInterface.OnSubmit;
                @Submit.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnSubmit;
                @Submit.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnSubmit;
                @Cancel.started -= m_Wrapper.m_UIActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnCancel;
                @Point.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @ScrollWheel.started -= m_Wrapper.m_UIActionsCallbackInterface.OnScrollWheel;
                @ScrollWheel.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnScrollWheel;
                @ScrollWheel.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnScrollWheel;
                @MiddleClick.started -= m_Wrapper.m_UIActionsCallbackInterface.OnMiddleClick;
                @MiddleClick.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnMiddleClick;
                @MiddleClick.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnMiddleClick;
                @RightClick.started -= m_Wrapper.m_UIActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnRightClick;
                @TrackedDevicePosition.started -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDevicePosition;
                @TrackedDeviceOrientation.started -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnTrackedDeviceOrientation;
                @Join.started -= m_Wrapper.m_UIActionsCallbackInterface.OnJoin;
                @Join.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnJoin;
                @Join.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnJoin;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @MiddleClick.started += instance.OnMiddleClick;
                @MiddleClick.performed += instance.OnMiddleClick;
                @MiddleClick.canceled += instance.OnMiddleClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @TrackedDevicePosition.started += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled += instance.OnTrackedDevicePosition;
                @TrackedDeviceOrientation.started += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled += instance.OnTrackedDeviceOrientation;
                @Join.started += instance.OnJoin;
                @Join.performed += instance.OnJoin;
                @Join.canceled += instance.OnJoin;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private ICombatActions m_CombatActionsCallbackInterface;
    private readonly InputAction m_Combat_CombatGridMove;
    private readonly InputAction m_Combat_CombatGridMoveReset;
    private readonly InputAction m_Combat_CombatInteract;
    private readonly InputAction m_Combat_CombatCancel;
    private readonly InputAction m_Combat_CombatUINavigate;
    private readonly InputAction m_Combat_CombatUIEnter;
    public struct CombatActions
    {
        private @PlayerControls m_Wrapper;
        public CombatActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CombatGridMove => m_Wrapper.m_Combat_CombatGridMove;
        public InputAction @CombatGridMoveReset => m_Wrapper.m_Combat_CombatGridMoveReset;
        public InputAction @CombatInteract => m_Wrapper.m_Combat_CombatInteract;
        public InputAction @CombatCancel => m_Wrapper.m_Combat_CombatCancel;
        public InputAction @CombatUINavigate => m_Wrapper.m_Combat_CombatUINavigate;
        public InputAction @CombatUIEnter => m_Wrapper.m_Combat_CombatUIEnter;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterface != null)
            {
                @CombatGridMove.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatGridMove;
                @CombatGridMove.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatGridMove;
                @CombatGridMove.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatGridMove;
                @CombatGridMoveReset.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatGridMoveReset;
                @CombatGridMoveReset.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatGridMoveReset;
                @CombatGridMoveReset.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatGridMoveReset;
                @CombatInteract.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatInteract;
                @CombatInteract.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatInteract;
                @CombatInteract.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatInteract;
                @CombatCancel.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatCancel;
                @CombatCancel.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatCancel;
                @CombatCancel.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatCancel;
                @CombatUINavigate.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatUINavigate;
                @CombatUINavigate.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatUINavigate;
                @CombatUINavigate.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatUINavigate;
                @CombatUIEnter.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatUIEnter;
                @CombatUIEnter.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatUIEnter;
                @CombatUIEnter.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnCombatUIEnter;
            }
            m_Wrapper.m_CombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CombatGridMove.started += instance.OnCombatGridMove;
                @CombatGridMove.performed += instance.OnCombatGridMove;
                @CombatGridMove.canceled += instance.OnCombatGridMove;
                @CombatGridMoveReset.started += instance.OnCombatGridMoveReset;
                @CombatGridMoveReset.performed += instance.OnCombatGridMoveReset;
                @CombatGridMoveReset.canceled += instance.OnCombatGridMoveReset;
                @CombatInteract.started += instance.OnCombatInteract;
                @CombatInteract.performed += instance.OnCombatInteract;
                @CombatInteract.canceled += instance.OnCombatInteract;
                @CombatCancel.started += instance.OnCombatCancel;
                @CombatCancel.performed += instance.OnCombatCancel;
                @CombatCancel.canceled += instance.OnCombatCancel;
                @CombatUINavigate.started += instance.OnCombatUINavigate;
                @CombatUINavigate.performed += instance.OnCombatUINavigate;
                @CombatUINavigate.canceled += instance.OnCombatUINavigate;
                @CombatUIEnter.started += instance.OnCombatUIEnter;
                @CombatUIEnter.performed += instance.OnCombatUIEnter;
                @CombatUIEnter.canceled += instance.OnCombatUIEnter;
            }
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // WorldUI
    private readonly InputActionMap m_WorldUI;
    private IWorldUIActions m_WorldUIActionsCallbackInterface;
    private readonly InputAction m_WorldUI_WorldUINavigate;
    private readonly InputAction m_WorldUI_WorldUIInteract;
    public struct WorldUIActions
    {
        private @PlayerControls m_Wrapper;
        public WorldUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @WorldUINavigate => m_Wrapper.m_WorldUI_WorldUINavigate;
        public InputAction @WorldUIInteract => m_Wrapper.m_WorldUI_WorldUIInteract;
        public InputActionMap Get() { return m_Wrapper.m_WorldUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldUIActions set) { return set.Get(); }
        public void SetCallbacks(IWorldUIActions instance)
        {
            if (m_Wrapper.m_WorldUIActionsCallbackInterface != null)
            {
                @WorldUINavigate.started -= m_Wrapper.m_WorldUIActionsCallbackInterface.OnWorldUINavigate;
                @WorldUINavigate.performed -= m_Wrapper.m_WorldUIActionsCallbackInterface.OnWorldUINavigate;
                @WorldUINavigate.canceled -= m_Wrapper.m_WorldUIActionsCallbackInterface.OnWorldUINavigate;
                @WorldUIInteract.started -= m_Wrapper.m_WorldUIActionsCallbackInterface.OnWorldUIInteract;
                @WorldUIInteract.performed -= m_Wrapper.m_WorldUIActionsCallbackInterface.OnWorldUIInteract;
                @WorldUIInteract.canceled -= m_Wrapper.m_WorldUIActionsCallbackInterface.OnWorldUIInteract;
            }
            m_Wrapper.m_WorldUIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @WorldUINavigate.started += instance.OnWorldUINavigate;
                @WorldUINavigate.performed += instance.OnWorldUINavigate;
                @WorldUINavigate.canceled += instance.OnWorldUINavigate;
                @WorldUIInteract.started += instance.OnWorldUIInteract;
                @WorldUIInteract.performed += instance.OnWorldUIInteract;
                @WorldUIInteract.canceled += instance.OnWorldUIInteract;
            }
        }
    }
    public WorldUIActions @WorldUI => new WorldUIActions(this);
    public interface IWorldActions
    {
        void OnWorldNavigate(InputAction.CallbackContext context);
        void OnWorldInteract(InputAction.CallbackContext context);
        void OnWorldCancel(InputAction.CallbackContext context);
        void OnWorldUIEnter(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNavigate(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnScrollWheel(InputAction.CallbackContext context);
        void OnMiddleClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnTrackedDevicePosition(InputAction.CallbackContext context);
        void OnTrackedDeviceOrientation(InputAction.CallbackContext context);
        void OnJoin(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnCombatGridMove(InputAction.CallbackContext context);
        void OnCombatGridMoveReset(InputAction.CallbackContext context);
        void OnCombatInteract(InputAction.CallbackContext context);
        void OnCombatCancel(InputAction.CallbackContext context);
        void OnCombatUINavigate(InputAction.CallbackContext context);
        void OnCombatUIEnter(InputAction.CallbackContext context);
    }
    public interface IWorldUIActions
    {
        void OnWorldUINavigate(InputAction.CallbackContext context);
        void OnWorldUIInteract(InputAction.CallbackContext context);
    }
}
