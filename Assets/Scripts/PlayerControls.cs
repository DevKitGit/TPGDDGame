//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Combat"",
            ""id"": ""1c06f421-c113-4926-8ad6-033d4468320a"",
            ""actions"": [
                {
                    ""name"": ""GridMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9515cc3a-d577-4b41-be6a-65410bb4518e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(max=0.925)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Ability West"",
                    ""type"": ""Button"",
                    ""id"": ""f44df744-74bd-4d9e-96d3-e28cb30d83be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability East"",
                    ""type"": ""Button"",
                    ""id"": ""3ca29828-4168-418f-874b-f8beab797663"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability South"",
                    ""type"": ""Button"",
                    ""id"": ""1bc0ff39-22b0-4fc4-8f98-e3dd6f9a25f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability North"",
                    ""type"": ""Button"",
                    ""id"": ""63d363c5-e353-4807-b3b3-e98fcb2e45bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Consumable Left"",
                    ""type"": ""Button"",
                    ""id"": ""0e04186b-3186-435f-963b-189f6ebd792c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Consumable Right"",
                    ""type"": ""Button"",
                    ""id"": ""81fcdabe-b003-4c06-9209-962bfd5ef534"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Consumable Down"",
                    ""type"": ""Button"",
                    ""id"": ""ec91c669-6600-429d-a404-af80f0f072a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Consumable Up"",
                    ""type"": ""Button"",
                    ""id"": ""1337f60f-2510-456a-9400-360e4c969aca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3c774f0-b47c-4d43-8c31-4b59d6a9d796"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability West"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3a1cf1a4-9261-4c4d-a9c3-50c06b26d281"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c585e7c2-2f6a-4f7b-a1da-429888a01640"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04197411-b8a4-440a-aa94-7751d35b56a5"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""20601546-bc82-4a54-a18b-d8ee5f7d6cfd"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""44d29fd0-5576-41a9-91d0-dcb47edc68fb"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""55ac9619-b72f-4cbf-80b9-987cb5613d43"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability East"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd26a63a-69c6-4300-a8c4-14e93bec1229"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability South"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f50a36e2-8989-4477-a550-ac1b4c687ac1"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability North"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da24ea5d-5cd8-4e22-bc41-05807f672738"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Consumable Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9f1f53f-8961-4049-8e45-506549375f79"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Consumable Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18f1bcf9-9b13-4dbe-9641-3d58ebfed080"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Consumable Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2ae3a6a-8d51-437b-8761-5c6d4cf65df5"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Consumable Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""World"",
            ""id"": ""e9f9dee0-a9aa-4767-9a76-d9c41e5d1166"",
            ""actions"": [
                {
                    ""name"": ""GridMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""beaec202-bd07-4c4b-894f-924579ee89de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(max=0.925)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ba72df1d-27b1-4583-9ac7-70af66ecf84b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9ffb63d7-5cae-4c46-88c4-f64642f5fe1e"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""44dc07ff-de8c-4020-a6cb-0d8203e095a6"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6e19f725-aa36-4186-8599-927cbcacbedd"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""24406936-cf97-41c2-8653-94330ff55d50"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_GridMove = m_Combat.FindAction("GridMove", throwIfNotFound: true);
        m_Combat_AbilityWest = m_Combat.FindAction("Ability West", throwIfNotFound: true);
        m_Combat_AbilityEast = m_Combat.FindAction("Ability East", throwIfNotFound: true);
        m_Combat_AbilitySouth = m_Combat.FindAction("Ability South", throwIfNotFound: true);
        m_Combat_AbilityNorth = m_Combat.FindAction("Ability North", throwIfNotFound: true);
        m_Combat_ConsumableLeft = m_Combat.FindAction("Consumable Left", throwIfNotFound: true);
        m_Combat_ConsumableRight = m_Combat.FindAction("Consumable Right", throwIfNotFound: true);
        m_Combat_ConsumableDown = m_Combat.FindAction("Consumable Down", throwIfNotFound: true);
        m_Combat_ConsumableUp = m_Combat.FindAction("Consumable Up", throwIfNotFound: true);
        // World
        m_World = asset.FindActionMap("World", throwIfNotFound: true);
        m_World_GridMove = m_World.FindAction("GridMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Combat
    private readonly InputActionMap m_Combat;
    private ICombatActions m_CombatActionsCallbackInterface;
    private readonly InputAction m_Combat_GridMove;
    private readonly InputAction m_Combat_AbilityWest;
    private readonly InputAction m_Combat_AbilityEast;
    private readonly InputAction m_Combat_AbilitySouth;
    private readonly InputAction m_Combat_AbilityNorth;
    private readonly InputAction m_Combat_ConsumableLeft;
    private readonly InputAction m_Combat_ConsumableRight;
    private readonly InputAction m_Combat_ConsumableDown;
    private readonly InputAction m_Combat_ConsumableUp;
    public struct CombatActions
    {
        private @PlayerControls m_Wrapper;
        public CombatActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @GridMove => m_Wrapper.m_Combat_GridMove;
        public InputAction @AbilityWest => m_Wrapper.m_Combat_AbilityWest;
        public InputAction @AbilityEast => m_Wrapper.m_Combat_AbilityEast;
        public InputAction @AbilitySouth => m_Wrapper.m_Combat_AbilitySouth;
        public InputAction @AbilityNorth => m_Wrapper.m_Combat_AbilityNorth;
        public InputAction @ConsumableLeft => m_Wrapper.m_Combat_ConsumableLeft;
        public InputAction @ConsumableRight => m_Wrapper.m_Combat_ConsumableRight;
        public InputAction @ConsumableDown => m_Wrapper.m_Combat_ConsumableDown;
        public InputAction @ConsumableUp => m_Wrapper.m_Combat_ConsumableUp;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterface != null)
            {
                @GridMove.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnGridMove;
                @GridMove.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnGridMove;
                @GridMove.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnGridMove;
                @AbilityWest.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilityWest;
                @AbilityWest.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilityWest;
                @AbilityWest.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilityWest;
                @AbilityEast.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilityEast;
                @AbilityEast.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilityEast;
                @AbilityEast.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilityEast;
                @AbilitySouth.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilitySouth;
                @AbilitySouth.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilitySouth;
                @AbilitySouth.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilitySouth;
                @AbilityNorth.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilityNorth;
                @AbilityNorth.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilityNorth;
                @AbilityNorth.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnAbilityNorth;
                @ConsumableLeft.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableLeft;
                @ConsumableLeft.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableLeft;
                @ConsumableLeft.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableLeft;
                @ConsumableRight.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableRight;
                @ConsumableRight.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableRight;
                @ConsumableRight.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableRight;
                @ConsumableDown.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableDown;
                @ConsumableDown.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableDown;
                @ConsumableDown.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableDown;
                @ConsumableUp.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableUp;
                @ConsumableUp.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableUp;
                @ConsumableUp.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnConsumableUp;
            }
            m_Wrapper.m_CombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GridMove.started += instance.OnGridMove;
                @GridMove.performed += instance.OnGridMove;
                @GridMove.canceled += instance.OnGridMove;
                @AbilityWest.started += instance.OnAbilityWest;
                @AbilityWest.performed += instance.OnAbilityWest;
                @AbilityWest.canceled += instance.OnAbilityWest;
                @AbilityEast.started += instance.OnAbilityEast;
                @AbilityEast.performed += instance.OnAbilityEast;
                @AbilityEast.canceled += instance.OnAbilityEast;
                @AbilitySouth.started += instance.OnAbilitySouth;
                @AbilitySouth.performed += instance.OnAbilitySouth;
                @AbilitySouth.canceled += instance.OnAbilitySouth;
                @AbilityNorth.started += instance.OnAbilityNorth;
                @AbilityNorth.performed += instance.OnAbilityNorth;
                @AbilityNorth.canceled += instance.OnAbilityNorth;
                @ConsumableLeft.started += instance.OnConsumableLeft;
                @ConsumableLeft.performed += instance.OnConsumableLeft;
                @ConsumableLeft.canceled += instance.OnConsumableLeft;
                @ConsumableRight.started += instance.OnConsumableRight;
                @ConsumableRight.performed += instance.OnConsumableRight;
                @ConsumableRight.canceled += instance.OnConsumableRight;
                @ConsumableDown.started += instance.OnConsumableDown;
                @ConsumableDown.performed += instance.OnConsumableDown;
                @ConsumableDown.canceled += instance.OnConsumableDown;
                @ConsumableUp.started += instance.OnConsumableUp;
                @ConsumableUp.performed += instance.OnConsumableUp;
                @ConsumableUp.canceled += instance.OnConsumableUp;
            }
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // World
    private readonly InputActionMap m_World;
    private IWorldActions m_WorldActionsCallbackInterface;
    private readonly InputAction m_World_GridMove;
    public struct WorldActions
    {
        private @PlayerControls m_Wrapper;
        public WorldActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @GridMove => m_Wrapper.m_World_GridMove;
        public InputActionMap Get() { return m_Wrapper.m_World; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldActions set) { return set.Get(); }
        public void SetCallbacks(IWorldActions instance)
        {
            if (m_Wrapper.m_WorldActionsCallbackInterface != null)
            {
                @GridMove.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnGridMove;
                @GridMove.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnGridMove;
                @GridMove.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnGridMove;
            }
            m_Wrapper.m_WorldActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GridMove.started += instance.OnGridMove;
                @GridMove.performed += instance.OnGridMove;
                @GridMove.canceled += instance.OnGridMove;
            }
        }
    }
    public WorldActions @World => new WorldActions(this);
    public interface ICombatActions
    {
        void OnGridMove(InputAction.CallbackContext context);
        void OnAbilityWest(InputAction.CallbackContext context);
        void OnAbilityEast(InputAction.CallbackContext context);
        void OnAbilitySouth(InputAction.CallbackContext context);
        void OnAbilityNorth(InputAction.CallbackContext context);
        void OnConsumableLeft(InputAction.CallbackContext context);
        void OnConsumableRight(InputAction.CallbackContext context);
        void OnConsumableDown(InputAction.CallbackContext context);
        void OnConsumableUp(InputAction.CallbackContext context);
    }
    public interface IWorldActions
    {
        void OnGridMove(InputAction.CallbackContext context);
    }
}
